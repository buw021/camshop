const match = await comparePassword(password, user.password);
if (match) {
  const tokenOptions = rememberMe ? { expiresIn: '7d' } : {}; // Set token expiration to 7 days if "Remember Me" is checked
  jwt.sign(
    { email: user.email, id: user.id },
    process.env.JWT_SECRET,
    tokenOptions,
    (err, token) => {
      if (err) throw err;
      res.cookie("token", token, { httpOnly: true, maxAge: rememberMe ? 7 * 24 * 60 * 60 * 1000 : undefined }).json(user); // Set cookie expiration to 7 days if "Remember Me" is checked
    }
  );
} else {
  return res.json({ error: "Password do not match" });
}
} catch (error) {
  return res.json({
    error: "Internal server error",
  });
}

AI-generated code. Review and use carefully. More info on FAQ.
Update the Client-Side Code: Pass the “Remember Me” checkbox value to the login function.
JavaScript

const handleLogin = async (email, password, rememberMe) => {
  try {
    const response = await axios.post("/login", { email, password, rememberMe });
    // Handle successful login
  } catch (error) {
    // Handle login error
  }
};

AI-generated code. Review and use carefully. More info on FAQ.
Update the Login Form: Include a “Remember Me” checkbox in your login form and pass its value to the handleLogin function.
JavaScript

const [rememberMe, setRememberMe] = useState(false);

return (
  <form onSubmit={handleSubmit}>
    <input type="email" name="email" required />
    <input type="password" name="password" required />
    <label>
      <input type="checkbox" checked={rememberMe} onChange={(e) => setRememberMe(e.target.checked)} />
      Remember Me
    </label>
    <button type="submit">Log In</button>
  </form>
);